import React, { useRef, useEffect, useState } from 'react';
import * as THREE from 'three';
import { FBXLoader } from 'three/examples/jsm/loaders/FBXLoader';
import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';

// Web Worker code
const workerCode = `
  self.onmessage = function(e) {
    const { type, data } = e.data;
    if (type === 'checkFrustum') {
      const { meshData, frustumPlanes, bufferFactor } = data;
      const result = meshData.map(mesh => ({
        id: mesh.id,
        status: getMeshStatus(mesh, frustumPlanes, bufferFactor)
      }));
      self.postMessage({ type: 'frustumResult', data: result });
    }
  };

  function getMeshStatus(mesh, frustumPlanes, bufferFactor) {
    const inFrustum = isInFrustum(mesh, frustumPlanes, 1);
    if (inFrustum) return 'visible';
    const inBuffer = isInFrustum(mesh, frustumPlanes, bufferFactor);
    return inBuffer ? 'buffer' : 'unloaded';
  }

  function isInFrustum(mesh, frustumPlanes, scaleFactor) {
    for (let i = 0; i < 6; i++) {
      const plane = frustumPlanes[i];
      const distance = 
        plane.normal.x * mesh.position.x + 
        plane.normal.y * mesh.position.y + 
        plane.normal.z * mesh.position.z + 
        plane.constant;
      if (distance < -mesh.boundingSphere.radius * scaleFactor) {
        return false;
      }
    }
    return true;
  }
`;


function RandomFbxFiles() {
  const mountRef = useRef(null);
  const [files, setFiles] = useState([]);
  const sceneRef = useRef(new THREE.Scene());
  const cameraRef = useRef(null);
  const controlsRef = useRef(null);
  const workerRef = useRef(null);
  const meshesRef = useRef([]);
  const loadedMeshesRef = useRef(new Set());
  const unloadedMeshCountRef = useRef(0);
  const infoElementRef = useRef(null);
  const totalVolumeRef = useRef(0);
  const filesCountRef = useRef(0);
  const bufferZoneMeshCountRef = useRef(0);
  const BUFFER_FACTOR = 100; // Adjust this to change the size of the buffer zone


  const UNITS_TO_METERS = 0.01;

  useEffect(() => {
    const scene = sceneRef.current;
    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 4000);
    cameraRef.current = camera;
    const renderer = new THREE.WebGLRenderer();
    renderer.setSize(window.innerWidth, window.innerHeight);
    renderer.setClearColor(0xffff00);
    mountRef.current.appendChild(renderer.domElement);

    const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);
    scene.add(ambientLight);
    const directionalLight = new THREE.DirectionalLight(0xffffff, 0.5);
    directionalLight.position.set(0, 1, 0);
    scene.add(directionalLight);

    const controls = new OrbitControls(camera, renderer.domElement);
    controlsRef.current = controls;

    // Create Web Worker
    const workerBlob = new Blob([workerCode], { type: 'application/javascript' });
    const workerUrl = URL.createObjectURL(workerBlob);
    workerRef.current = new Worker(workerUrl);

    workerRef.current.onmessage = (e) => {
      const { type, data } = e.data;
      if (type === 'frustumResult') {
        updateVisibleMeshes(data);
      }
    };

    const loadFBX = (file) => {
      return new Promise((resolve, reject) => {
        const loader = new FBXLoader();
        const objectUrl = URL.createObjectURL(file);

        loader.load(objectUrl, (object) => {
          URL.revokeObjectURL(objectUrl);
          resolve(object);
        }, undefined, (error) => {
          console.error('An error occurred while loading the FBX file:', error);
          reject(error);
        });
      });
    };

    const processLoadedObjects = (objects) => {
        const cumulativeBoundingBox = new THREE.Box3();
        let totalVolume = 0;
        let totalMeshCount = 0;
      
        objects.forEach(object => {
          if (object && object.isObject3D) {
            const objectBoundingBox = new THREE.Box3().setFromObject(object);
            cumulativeBoundingBox.union(objectBoundingBox);
      
            object.traverse((child) => {
              if (child.isMesh) {
                const boundingSphere = new THREE.Sphere();
                child.geometry.computeBoundingSphere();
                boundingSphere.copy(child.geometry.boundingSphere).applyMatrix4(child.matrixWorld);
                
                meshesRef.current.push({
                  id: child.id,
                  mesh: child,
                  position: child.position.clone(),
                  boundingSphere: {
                    center: boundingSphere.center.clone(),
                    radius: boundingSphere.radius
                  }
                });
                totalMeshCount++;
              }
            });
      
            const objectSize = objectBoundingBox.getSize(new THREE.Vector3());
            const objectVolume = objectSize.x * objectSize.y * objectSize.z * Math.pow(UNITS_TO_METERS, 3);
            totalVolume += objectVolume;
          }
        });
      
        if (cumulativeBoundingBox.isEmpty()) {
          console.warn('No valid objects loaded');
          return;
        }
      
        const center = cumulativeBoundingBox.getCenter(new THREE.Vector3());
        const size = cumulativeBoundingBox.getSize(new THREE.Vector3());
      
        // Calculate the proper camera distance
        const maxDim = Math.max(size.x, size.y, size.z);
        const fov = camera.fov * (Math.PI / 180);
        const cameraDistance = (maxDim / 2) / Math.tan(fov / 2);
      
        // Position camera to view the entire bounding box
        camera.position.set(
          center.x + size.x / 2,
          center.y + size.y / 2,
          center.z + cameraDistance * 1.1
        ); // Add 10% margin
        camera.lookAt(center);
      
        // Adjust near and far planes
        camera.near = cameraDistance / 100;
        camera.far = cameraDistance * 100;
        camera.updateProjectionMatrix();
      
        // Set orbit controls
        controls.target.copy(center);
        controls.minDistance = cameraDistance * 0.5;
        controls.maxDistance = cameraDistance * 2;
        controls.update();
      
        // Add bounding box helper for all loaded files
        const boxHelper = new THREE.BoxHelper(new THREE.Mesh(new THREE.BoxGeometry(size.x, size.y, size.z)), 0xffff00);
        boxHelper.position.copy(center);
        scene.add(boxHelper);
      
        // Add axes helper
        const axesHelper = new THREE.AxesHelper(maxDim / 2);
        axesHelper.position.copy(center);
        scene.add(axesHelper);
      
        infoElementRef.current = document.createElement('div');
        infoElementRef.current.style.position = 'absolute';
        infoElementRef.current.style.top = '50px';
        infoElementRef.current.style.left = '10px';
        infoElementRef.current.style.color = 'white';
        infoElementRef.current.style.backgroundColor = 'rgba(0, 0, 0, 0.7)';
        infoElementRef.current.style.padding = '10px';
        infoElementRef.current.style.borderRadius = '5px';
        mountRef.current.appendChild(infoElementRef.current);
      
        totalVolumeRef.current = totalVolume;
        filesCountRef.current = objects.length;
      
        const updateFrustumInfo = () => {
            const frustum = new THREE.Frustum();
            const projScreenMatrix = new THREE.Matrix4();
            projScreenMatrix.multiplyMatrices(camera.projectionMatrix, camera.matrixWorldInverse);
            frustum.setFromProjectionMatrix(projScreenMatrix);
    
            const frustumPlanes = frustum.planes.map(plane => ({
              normal: { x: plane.normal.x, y: plane.normal.y, z: plane.normal.z },
              constant: plane.constant
            }));
    
            const serializableMeshData = meshesRef.current.map(mesh => ({
              id: mesh.id,
              position: { x: mesh.position.x, y: mesh.position.y, z: mesh.position.z },
              boundingSphere: {
                center: { x: mesh.boundingSphere.center.x, y: mesh.boundingSphere.center.y, z: mesh.boundingSphere.center.z },
                radius: mesh.boundingSphere.radius
              }
            }));
    
            workerRef.current.postMessage({
              type: 'checkFrustum',
              data: {
                meshData: serializableMeshData,
                frustumPlanes: frustumPlanes,
                bufferFactor: BUFFER_FACTOR
              }
            });
          };
    
          updateFrustumInfo();
          controls.addEventListener('change', updateFrustumInfo);
        };
    
        const updateVisibleMeshes = (meshStatuses) => {
          const visibleMeshes = new Set();
          const bufferMeshes = new Set();
          let unloadedCount = 0;
    
          meshStatuses.forEach(({ id, status }) => {
            const meshData = meshesRef.current.find(m => m.id === id);
            if (!meshData) return;
    
            switch (status) {
              case 'visible':
                scene.add(meshData.mesh);
                meshData.mesh.visible = true;
                visibleMeshes.add(id);
                break;
              case 'buffer':
                scene.add(meshData.mesh);
                meshData.mesh.visible = false;
                bufferMeshes.add(id);
                break;
              case 'unloaded':
                scene.remove(meshData.mesh);
                unloadedCount++;
                break;
            }
          });
    
          loadedMeshesRef.current = visibleMeshes;
          bufferZoneMeshCountRef.current = bufferMeshes.size;
          unloadedMeshCountRef.current = unloadedCount;
    
          updateInfoDisplay();
        };
    
        const updateInfoDisplay = () => {
          if (infoElementRef.current) {
            infoElementRef.current.innerHTML = `
              Total Volume of Files: ${totalVolumeRef.current.toFixed(6)} mÂ³<br>
              Number of Files: ${filesCountRef.current}<br>
              Total Meshes: ${meshesRef.current.length}<br>
              Visible Meshes: ${loadedMeshesRef.current.size}<br>
              Buffer Zone Meshes: ${bufferZoneMeshCountRef.current}<br>
              Unloaded Meshes: ${unloadedMeshCountRef.current}
            `;
          }
        };
    

    Promise.all(files.map(loadFBX))
      .then(processLoadedObjects)
      .catch(error => console.error('Error loading files:', error));

    const animate = () => {
      requestAnimationFrame(animate);
      controls.update();
      renderer.render(scene, camera);
    };
    animate();

    const handleResize = () => {
      camera.aspect = window.innerWidth / window.innerHeight;
      camera.updateProjectionMatrix();
      renderer.setSize(window.innerWidth, window.innerHeight);
    };
    window.addEventListener('resize', handleResize);

    return () => {
      window.removeEventListener('resize', handleResize);
      mountRef.current.removeChild(renderer.domElement);
      workerRef.current.terminate();
      URL.revokeObjectURL(workerUrl);
    };
  }, [files]);

  const handleFileChange = (event) => {
    setFiles([...event.target.files]);
  };

  return (
    <div>
      <input
        style={{position:'absolute', top:10, left:10, zIndex: 1000}}
        type="file"
        multiple
        accept=".fbx"
        onChange={handleFileChange}
      />
      <div ref={mountRef} style={{ width: '100%', height: '100vh' }} />
    </div>
  );
}

export default RandomFbxFiles;